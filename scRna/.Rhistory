plot1=FeatureScatter(object = Rhesus,feature1 = "nFeature_RNA",feature2 ="nCount_RNA"  )
View(Rhesus)
Rhesus@meta.data
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = "nFeature_RNA",feature2 ="nCount_RNA"  )
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA"  )
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
FeatureScatter(object = Rhesus,feature1 = 'percent_MT',feature2 = 'nFeature_RNA')
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
FeatureScatter(object = Rhesus,feature1 = 'nFeature_RNA',feature2 = 'percent_MT')
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 = 'percent_MT')
View(Rhesus)
View(Rhesus@meta.data)
Rhesus_singleplex=Read10X_h5("../data_folder/2500_Rhesus_Monkey_PBMCs_Singleplex_5p_gem-x_Universal_Multiplex_count_raw_feature_bc_matrix.h5",use.names = F,unique.features = T)
Rhesus=CreateSeuratObject(Rhesus_singleplex,project = "Rhesus_practice",min.cells = 3,min.features = 1)
Rhesus[["percent_MT"]]=PercentageFeatureSet(Rhesus,pattern = "^MT-")
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
View(Rhesus)
Rhesus@meta.data
Rhesus=CreateSeuratObject(Rhesus_singleplex,project = "Rhesus_practice",min.cells = 3,min.features = 1)
Rhesus[["percent_MT"]]=PercentageFeatureSet(Rhesus,pattern = "^MT-")
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
Rhesus_singleplex=Read10X_h5("../data_folder/2500_Rhesus_Monkey_PBMCs_Singleplex_5p_gem-x_Universal_Multiplex_count_raw_feature_bc_matrix.h5",use.names = F,unique.features = T)
View(Rhesus_singleplex)
Rhesus_singleplex@i
Rhesus_singleplex@p
View(Rhesus)
View(Rhesus@meta.data)
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
View(Rhesus)
Rhesus@assays
Rhesus@assays
Rhesus@meta.data
Rhesus_singleplex=Read10X_h5("../data_folder/2500_Rhesus_Monkey_PBMCs_Singleplex_5p_gem-x_Universal_Multiplex_count_raw_feature_bc_matrix.h5",use.names = T,unique.features = T)
Rhesus=CreateSeuratObject(Rhesus_singleplex,project = "Rhesus_practice",min.cells = 3,min.features = 1)
Rhesus[["percent_MT"]]=PercentageFeatureSet(Rhesus,pattern = "^MT-")
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 = 'percent_MT')
Rhesus=subset(Rhesus,subset =  nFeature_RNA > 200 & nFeature_RNA < 4000 & percent.mt < 5))
Rhesus=subset(Rhesus,subset =  nFeature_RNA > 200 & nFeature_RNA < 4000 & percent.mt < 5)
Rhesus=subset(Rhesus,subset =  nFeature_RNA > 200 & nFeature_RNA < 4000 & percent_mt < 5)
Rhesus=subset(Rhesus,subset =  nFeature_RNA > 200 & nFeature_RNA < 4000 & percent_NT < 5)
Rhesus=subset(Rhesus,subset =  nFeature_RNA > 200 & nFeature_RNA < 4000 & percent_MT < 5)
View(Rhesus)
Rhesus@meta.data
VlnPlot(Rhesus, features = c("nFeature_RNA", "nCount_RNA", "percent_MT"), ncol = 3)
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 ='nFeature_RNA'  )
FeatureScatter(object = Rhesus,feature1 = 'nCount_RNA',feature2 = 'percent_MT')
Rhesus=NormalizeData(object = Rhesus,normalization.method = "LogNormalize")
Rhesus
Rhesus= FindVariableFeatures(object = Rhesus,selection.method = "vst")
head(VariableFeatures(object = Rhesus))
head(VariableFeatures(object = Rhesus))
VariableFeaturePlot(object = Rhesus,cols = c("red","black"))
head(VariableFeatures(object = Rhesus))
VariableFeaturePlot(object = Rhesus,cols = c("black","red"))
top20=head(VariableFeatures(object = Rhesus),20)
plot1=VariableFeaturePlot(object = Rhesus,cols = c("black","red"))
LabelPoints(plot1,points=head(VariableFeatures(object = Rhesus),20),repel = T)
View(Rhesus)
View(Rhesus@meta.data)
Rhesus=SCTransform(Rhesus,vars.to.regress = "percent_MT")
Rhesus=RunPCA(Rhesus)
Rhesus=RunUMAP(Rhesus,dims = 1:30)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
DimPlot(object = Rhesus,label = T)
Rhesus=RunPCA(Rhesus)
Rhesus=RunUMAP(Rhesus,dims = 1:30)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimPlot(object = Rhesus,label = T)
Rhesus=RunPCA(Rhesus)
Rhesus=RunUMAP(Rhesus,dims = 1:30)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus)
DimPlot(object = Rhesus,label = T)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus,balanced = T)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
DimPlot(object = Rhesus,group.by = 'nFeature_RNA')
DimPlot(object = Rhesus,split.by =  'nFeature_RNA')
DimPlot(object = Rhesus)
DimPlot(object = Rhesus,dims = 3)
DimPlot(object = Rhesus,dims = 2)
DimPlot(object = Rhesus,dims = 1:3)
DimPlot(object = Rhesus,dims = 1:2)
DimPlot(object = Rhesus,cols = "nCount_rna")
DimPlot(object = Rhesus,cols = Rhesus$nCount_RNA)
FeaturePlot(object = Rhesus)
DimPlot(object = Rhesus,group.by =  Rhesus$nCount_RNA)
DimPlot(object = Rhesus,group.by = Rhesus$nCount_RNA)
DimPlot(object = Rhesus,cols  = as.factor(Rhesus$nCount_RNA))
FeaturePlot(object = Rhesus)
FeaturePlot(object = Rhesus,features = Rhesus$nCounts_RNA)
FeaturePlot(object = Rhesus,features = Rhesus$nCount_RNA)
FeaturePlot(object = Rhesus,features = 'nCount_RNA')
FeaturePlot(object = Rhesus,features = 'nFeatures_RNA')
FeaturePlot(object = Rhesus,features = 'nFeature_RNA')
FeaturePlot(object = Rhesus,features = 'nFeature_RNA')
FeaturePlot(object = Rhesus,features = 'nCounts_RNA')
FeaturePlot(object = Rhesus,features = 'nFeature_RNA')
FeaturePlot(object = Rhesus,features = 'nCount_RNA')
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus,balanced = T)
ElbowPlot(Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus,dims = 1:20,balanced = T)
ElbowPlot(Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus,dims = 1:20)
ElbowPlot(Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus)
DimHeatmap(object = Rhesus,dims = 1:20,cells = 1000)
ElbowPlot(Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
VizDimLoadings(object = Rhesus)
FeaturePlot(object = Rhesus,features = 'nFeature_RNA')
FeaturePlot(object = Rhesus,features = 'nCount_RNA')
VizDimLoadings(object = Rhesus,dims = 1)
FeaturePlot(object = Rhesus,features = 'nFeature_RNA')
FeaturePlot(object = Rhesus,features = 'nCount_RNA')
Rhesus=FindNeighbors(Rhesus,dims = 1:30)
Rhesus=FindClusters(object = Rhesus,resolution = 1.2)
DimHeatmap(object = Rhesus,dims = 1:20,cells = 1000)
ElbowPlot(Rhesus)
DimPlot(object = Rhesus,label = T)
print(Rhesus[["pca"]],dims=1:5,nfeatures = 10)
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
#install.packages("ggplot2")
#install.packages("Seurat")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("hdf5r")
library(Seurat)
library(ggplot2)
library(readr)
library(dplyr)
library(hdf5r)
install.packages('plotly')
# Load plot_ly
library(plotly)
install.packages("plotly")
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
# Updates stemming from Issue #9 Having a fixed scale on axes while selecting particular clusters
# @rtoddler thanks for the suggestions!
# Before you plot, set the ranges of the axis you desire. This set axis range will be
# present across all clusters, and plotly will not adjust for axis length anymore
# this axis length will persist even when selecting some clusters
# xaxis
axx <- list(
nticks = 4,
range = c(-10,10) #select range of xaxis
)
# yaxis
axy <- list(
nticks = 4,
range = c(-10,10) #select range of yaxis
)
#zaxis
axz <- list(
nticks = 4,
range = c(-10,10) #select range of zaxis
)
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig_cube <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz, aspectmode='cube')) # To maintain cubic aspect
fig
Rhesus=RunPCA(Rhesus)
Rhesus=RunUMAP(Rhesus,dims = 1:30)
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
# Updates stemming from Issue #9 Having a fixed scale on axes while selecting particular clusters
# @rtoddler thanks for the suggestions!
# Before you plot, set the ranges of the axis you desire. This set axis range will be
# present across all clusters, and plotly will not adjust for axis length anymore
# this axis length will persist even when selecting some clusters
# xaxis
axx <- list(
nticks = 4,
range = c(-10,10) #select range of xaxis
)
# yaxis
axy <- list(
nticks = 4,
range = c(-10,10) #select range of yaxis
)
#zaxis
axz <- list(
nticks = 4,
range = c(-10,10) #select range of zaxis
)
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig_cube <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz, aspectmode='cube')) # To maintain cubic aspect
fig
Rhesus <- RunUMAP(Rhesus,
dims = 1:10,
n.components = 3L)
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
# Updates stemming from Issue #9 Having a fixed scale on axes while selecting particular clusters
# @rtoddler thanks for the suggestions!
# Before you plot, set the ranges of the axis you desire. This set axis range will be
# present across all clusters, and plotly will not adjust for axis length anymore
# this axis length will persist even when selecting some clusters
# xaxis
axx <- list(
nticks = 4,
range = c(-10,10) #select range of xaxis
)
# yaxis
axy <- list(
nticks = 4,
range = c(-10,10) #select range of yaxis
)
#zaxis
axz <- list(
nticks = 4,
range = c(-10,10) #select range of zaxis
)
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig_cube <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz, aspectmode='cube')) # To maintain cubic aspect
fig
Rhesus <- RunUMAP(Rhesus,
dims = 1:10,
n.components = 3L)
UMAP_1 <- Rhesus[["umap"]]@cell.embeddings[,1]
UMAP_2 <- Rhesus[["umap"]]@cell.embeddings[,2]
UMAP_3 <- Rhesus[["umap"]]@cell.embeddings[,3]
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
# Updates stemming from Issue #9 Having a fixed scale on axes while selecting particular clusters
# @rtoddler thanks for the suggestions!
# Before you plot, set the ranges of the axis you desire. This set axis range will be
# present across all clusters, and plotly will not adjust for axis length anymore
# this axis length will persist even when selecting some clusters
# xaxis
axx <- list(
nticks = 4,
range = c(-10,10) #select range of xaxis
)
# yaxis
axy <- list(
nticks = 4,
range = c(-10,10) #select range of yaxis
)
#zaxis
axz <- list(
nticks = 4,
range = c(-10,10) #select range of zaxis
)
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig_cube <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz, aspectmode='cube')) # To maintain cubic aspect
fig
fig_cube
Rhesus <- RunUMAP(Rhesus,
dims = 1:30,
n.components = 3L)
UMAP_1 <- Rhesus[["umap"]]@cell.embeddings[,1]
UMAP_2 <- Rhesus[["umap"]]@cell.embeddings[,2]
UMAP_3 <- Rhesus[["umap"]]@cell.embeddings[,3]
Embeddings(object = Rhesus, reduction = "umap")
# Prepare a dataframe for cell plotting
plot.data <- FetchData(object = Rhesus, vars = c("UMAP_1", "UMAP_2", "UMAP_3", "seurat_clusters"))
# Make a column of row name identities (these will be your cell/barcode names)
plot.data$label <- paste(rownames(plot.data))
# Plot your data, in this example my Seurat object had 21 clusters (0-20)
fig <- plot_ly(data = plot.data,
x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3,
color = ~seurat_clusters,
colors = c("lightseagreen",
"gray50",
"darkgreen",
"red4",
"red",
"turquoise4",
"black",
"yellow4",
"royalblue1",
"lightcyan3",
"peachpuff3",
"khaki3",
"gray20",
"orange2",
"royalblue4",
"yellow3",
"gray80",
"darkorchid1",
"lawngreen",
"plum2",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
# Updates stemming from Issue #9 Having a fixed scale on axes while selecting particular clusters
# @rtoddler thanks for the suggestions!
# Before you plot, set the ranges of the axis you desire. This set axis range will be
# present across all clusters, and plotly will not adjust for axis length anymore
# this axis length will persist even when selecting some clusters
# xaxis
axx <- list(
nticks = 4,
range = c(-10,10) #select range of xaxis
)
# yaxis
axy <- list(
nticks = 4,
range = c(-10,10) #select range of yaxis
)
#zaxis
axz <- list(
nticks = 4,
range = c(-10,10) #select range of zaxis
)
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig_cube <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz, aspectmode='cube')) # To maintain cubic aspect
fig
fig_cube
